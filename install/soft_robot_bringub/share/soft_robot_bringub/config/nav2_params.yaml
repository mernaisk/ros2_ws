
# controller_server:
#   ros__parameters:
#     controller_frequency: 10.0

#     goal_checker_plugins: ["general_goal_checker"]
#     general_goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.1  # ← You can tweak this
#       yaw_goal_tolerance: 3.14
#       stateful: true

#     FollowPath:
#       plugin: "nav2_mppi_controller::MPPIController"
#       time_steps: 56
#       model_dt: 0.5
#       batch_size: 2000
#       # These control how noisy the trajectory samples are:
#       # vx_std: 0.2
#       # vy_std: 0.2
#       wz_std: 5.0
#       vx_max: 0.4       # ≈ π/4
#       vx_min: 0.2618      # because omni-directional
#       vy_max: 1.0472
#       vy_min: -0.35

#       wz_max: 3.14          # ✅ Full range of angular motion
#       wz_min: -3.14         # ✅ Explicitly allow full negative too

#       # These limit how fast the robot can change speed:
#       ax_max: 3.0
#       ax_min: -3.0
#       ay_max: 3.0
#       ay_min: -3.0
#       az_max: 3.5

#       iteration_count: 3
#       prune_distance: 1.7
#       transform_tolerance: 0.5
#       temperature: 0.3
#       gamma: 0.015
#       motion_model: "Omni"
#       visualize: false
#       reset_period: 1.0 # (only in Humble)
#       regenerate_noises: false
#       TrajectoryVisualizer:
#         trajectory_step: 5
#         time_step: 3
#       AckermannConstraints:
#         min_turning_r: 0.2
#       critics: ["ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic", "VelocityDeadbandCritic", "TwirlingCritic"]
#       ConstraintCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 4.0
#       GoalCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 5.0
#         threshold_to_consider: 1.4
#       GoalAngleCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 3.0
#         threshold_to_consider: 0.1
#       PreferForwardCritic:
#         enabled: false
#         cost_power: 1
#         cost_weight: 5.0
#         threshold_to_consider: 0.5
#       # ObstaclesCritic:
#       #   enabled: true
#       #   cost_power: 1
#       #   repulsion_weight: 1.5
#       #   critical_weight: 20.0
#       #   consider_footprint: false
#       #   collision_cost: 10000.0
#       #   collision_margin_distance: 0.1
#       #   near_goal_distance: 0.5
#       #   inflation_radius: 0.55 # (only in Humble)
#       #   cost_scaling_factor: 10.0 # (only in Humble)
#       CostCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 3.81
#         critical_cost: 300.0
#         consider_footprint: true
#         collision_cost: 1000000.0
#         near_goal_distance: 1.0
#         trajectory_point_step: 2
#       PathAlignCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 14.0
#         max_path_occupancy_ratio: 0.05
#         trajectory_point_step: 4
#         threshold_to_consider: 0.5
#         offset_from_furthest: 20
#         use_path_orientations: false
#       PathFollowCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 5.0
#         offset_from_furthest: 5
#         threshold_to_consider: 1.4
#       PathAngleCritic:
#         enabled: false
#         cost_power: 1
#         cost_weight: 2.0
#         offset_from_furthest: 4
#         threshold_to_consider: 0.5
#         max_angle_to_furthest: 1.0
#         mode: 0
#       VelocityDeadbandCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 100.0
#         deadband_velocities: [0.26, 0.26, 0.05]
#       TwirlingCritic:
#         enabled: false
#         twirling_cost_power: 1
#         twirling_cost_weight: 10.0


amcl:
  ros__parameters:
    odom_frame_id: "odom"
    base_frame_id: "base_link"
    global_frame_id: "map"
    scan_topic: "/scan"  # **Ensure AMCL listens to `/scan`**
    laser_max_range: 8.0
    laser_min_range: 0.15
    laser_model_type: "likelihood_field_prob"
    max_beams: 80 #Increasing this can improve accuracy but slows down processing significantly. Decreasing it speeds up processing but might make localization less accurate.

    use_sim_time: true
    min_particles: 500
    max_particles: 2000
    transform_tolerance: 0.3
    recovery_alpha_slow: 0.001
    recovery_alpha_fast: 0.1

    use_map_topic: true
    tf_broadcast: true
    update_min_d: 0.2
    update_min_a: 0.2
    resample_interval: 1
    alpha1: 0.05   # ← rotation noise from rotation
    alpha2: 0.05   # ← rotation noise from translation
    alpha3: 0.1    # ← translation noise from translation
    alpha4: 0.05   # ← translation noise from rotation
    alpha5: 0.03   # ← sensor short reading recovery


bt_navigator:
  ros__parameters:
    use_sim_time: false
    global_frame: map
    robot_base_frame: base_link

    # Time buffer when waiting for a transform (TF).
    # ⬆️ Higher = more forgiving if TFs are delayed, but can introduce lag.
    # ⬇️ Lower = faster reaction, but may cause errors if transforms are late.
    transform_tolerance: 0.1

    # Smooths the robot's velocity commands.
    # ⬆️ Higher = smoother motion but slower reaction.
    # ⬇️ Lower = sharper response but may look jerky.
    filter_duration: 0.3
    bt_loop_duration: 10
    recovery_behavior_enabled: true

    service_intropection_mode: "contents" #howmuch data shown for debugging. metadata: basic info "contents" = show full data (useful for debugging)
    always_reload_bt_xml: false
    navigators: ['navigate_to_pose']
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator" # In Iron and older versions, "/" was used instead of "::"
    
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_back_up_action_bt_node
      - nav2_rate_controller_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
    error_code_name_prefixes:
      - assisted_teleop
      - backup
      - compute_path
      - dock_robot
      - drive_on_heading
      - follow_path
      - nav_to_pose
      - spin
      - route
      - undock_robot
      - wait

local_costmap:
  local_costmap:
    ros__parameters:
      footprint: "[[-0.175, -0.13], [-0.175, 0.13], [0.175, 0.13], [0.175, -0.13]]"
      footprint_padding: 0.05
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      plugins: ["obstacle_layer", "inflation_layer"]
      
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 0.4

global_costmap:
  global_costmap:
    ros__parameters:
      footprint: "[[-0.175, -0.13], [-0.175, 0.13], [0.175, 0.13], [0.175, -0.13]]"
      footprint_padding: 0.05
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      track_unknown_space: true
      resolution: 0.05
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 0.5
        cost_scaling_factor: 2.0

map_server:
  ros__parameters:
    use_sim_time: false
    yaml_filename: "my_map12.yaml"


planner_server:
  ros__parameters:
    planner_plugins: ['GridBased']
    GridBased:
      plugin: 'nav2_navfn_planner/NavfnPlanner' # In Iron and older versions, "/" was used instead of "::"
      use_astar: True
      allow_unknown: True
      tolerance: 1.0
      
controller_server:
  ros__parameters:
    use_sim_time: true
    controller_frequency: 20.0
    controller_plugins: ["FollowPath"]
    goal_checker_plugins: ["goal_checker"]
    progress_checker_plugins: ["progress_checker"]

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.05
      movement_time_allowance: 10.0
      # If it hasn't moved 5 cm in 10 seconds, it's considered stuck, and the controller will fail the goal.
    
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.3
      yaw_goal_tolerance: 3.14
      stateful: True

    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: false

      min_vel_x: 0.35
      max_vel_x: 0.6
      min_vel_y: 0.0
      max_vel_y: 0.0
      min_vel_theta: -3.14
      max_vel_theta: 3.14

      min_speed_xy: 0.34
      max_speed_xy: 0.4
      min_speed_theta: 0.0

      acc_lim_x: 2.5
      acc_lim_y: 2.5
      acc_lim_theta: 3.2
      decel_lim_theta: -3.2
      # how many sample velocities are tested when generating and evaluating trajectories
      vx_samples: 20
      vy_samples: 20
      vtheta_samples: 40 #More samples = more accurate planning, but higher CPU usage

      sim_time: 1.0 #Time to simulate ahead by (s).
      linear_granularity: 0.05 #Check the trajectory every 3 cm for collision.
      angular_granularity: 0.01 #Check every 0.025 radians (~1.4°) when simulating turns.
      transform_tolerance: 0.2 # Allow up to 0.2 seconds of TF delay
      xy_goal_tolerance: 0.2 # You reach the goal if you're within 20 cm of the goal pose 
      trans_stopped_velocity: 0.25 #how slow the robot must go to be considered stopped before rotation or goal-checking.
      short_circuit_trajectory_evaluation: True
      limit_vel_cmd_in_traj: False
      stateful: True

      critics: ["BaseObstacle", "GoalAlign", "PathAlign", "RotateToGoal", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.5
      GoalAlign.scale: 20.0
      PathAlign.scale: 10.0
      RotateToGoal.scale: 20.0
      PathDist.scale: 24.0
      GoalDist.scale: 16.0

      GoalAlign.forward_point_distance: 0.1
      PathAlign.forward_point_distance: 0.1

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 10.0
    scale_velocities: false
    feedback: "OPEN_LOOP"
    max_velocity: [0.4, 0.0, 3.14]
    min_velocity: [0.35, 0.0, -3.14]
    deadband_velocity: [0.2618, 0.0, 0.0]
    velocity_timeout: 1.0
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    use_realtime_priority: false
    enable_stamped_cmd_vel: false

# planner_server:
#   ros__parameters:
#     planner_plugins: ["GridBased"]
#     use_sim_time: true

#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlannerHybrid"
#       allow_unknown: false
#       tolerance: 0.25
#       max_iterations: 100000
#       max_on_approach_iterations: 1000
#       max_planning_time: 2.0

#       analytic_expansion_ratio: 3.0
#       analytic_expansion_max_length: 2.5
#       analytic_expansion_max_cost: 250.0
#       analytic_expansion_max_cost_override: true

#       reverse_penalty: 1.0          # 🚫 Strongly discourage reverse
#       allow_reverse_expansion: false   # 🚫 Disable reverse primitives

#       change_penalty: 0.1              # Small penalty for changing direction (encourages commitment)
#       non_straight_penalty: 1.5        # Mild penalty to discourage unnecessary curves
#       rotation_penalty: 1.0            # ✅ Allow in-place rotations when useful
#       retrospective_penalty: 0.015

#       cost_penalty: 3.0                # Encourage going through lower-cost areas (center of hallway)
#       cache_obstacle_heuristic: false
#       lookup_table_size: 20.0

#       smooth_path: false
#       smoother:
#         max_iterations: 200
#         w_smooth: 0.3
#         w_data: 0.2
#         tolerance: 1.0e-10
#         do_refinement: true
#         refinement_num: 2